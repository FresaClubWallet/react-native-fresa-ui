/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FresaclubInterface extends ethers.utils.Interface {
  functions: {
    "editProduct(uint256,string,string,string,uint256,uint256,bool)": FunctionFragment;
    "readFavourite(uint256)": FunctionFragment;
    "readFavouriteCount(address)": FunctionFragment;
    "readFresaProductCount()": FunctionFragment;
    "readFresaSaleCount()": FunctionFragment;
    "readFresaStoreCount()": FunctionFragment;
    "readOrder(address,uint256)": FunctionFragment;
    "readOrderItems(address,uint256,uint256)": FunctionFragment;
    "readProduct(address,uint256)": FunctionFragment;
    "readProductCount(address)": FunctionFragment;
    "readProductExists(address,uint256)": FunctionFragment;
    "readStoreFront(address)": FunctionFragment;
    "readStoreFrontExisits(address)": FunctionFragment;
    "writeFavourite(address)": FunctionFragment;
    "writeOrder(address,tuple[])": FunctionFragment;
    "writeProduct(string,string,string,uint256,uint256,bool)": FunctionFragment;
    "writeStoreFront(string,string,string,string,string,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "editProduct",
    values: [
      BigNumberish,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "readFavourite",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "readFavouriteCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "readFresaProductCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "readFresaSaleCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "readFresaStoreCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "readOrder",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "readOrderItems",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "readProduct",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "readProductCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "readProductExists",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "readStoreFront",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "readStoreFrontExisits",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "writeFavourite",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "writeOrder",
    values: [
      string,
      {
        ProductName: string;
        Quantity: BigNumberish;
        CusdValue: BigNumberish;
        Storefront: string;
        index: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "writeProduct",
    values: [string, string, string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "writeStoreFront",
    values: [string, string, string, string, string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "editProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readFavourite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readFavouriteCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readFresaProductCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readFresaSaleCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readFresaStoreCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "readOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readOrderItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readProductCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readProductExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readStoreFront",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readStoreFrontExisits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writeFavourite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "writeOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "writeProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writeStoreFront",
    data: BytesLike
  ): Result;

  events: {};
}

export class Fresaclub extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FresaclubInterface;

  functions: {
    editProduct(
      _index: BigNumberish,
      _name: string,
      _image: string,
      _description: string,
      _price: BigNumberish,
      _qty: BigNumberish,
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    readFavourite(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { storefront: string }>;

    readFavouriteCount(
      _storeFront: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { FavouriteCount: BigNumber }>;

    readFresaProductCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { NetworkProductCount: BigNumber }>;

    readFresaSaleCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { NetworkSaleCount: BigNumber }>;

    readFresaStoreCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { NetworkStoreCount: BigNumber }>;

    readOrder(
      _customer: string,
      _orderid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        OrderId: BigNumber;
        TotalItems: BigNumber;
        TotalValue: BigNumber;
        Timestamp: BigNumber;
        customerAddress: string;
      }
    >;

    readOrderItems(
      _customer: string,
      _orderid: BigNumberish,
      _itemid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, BigNumber] & {
        _productName: string;
        _Quantity: BigNumber;
        _CusdValue: BigNumber;
        _StoreFront: string;
        _productIndex: BigNumber;
      }
    >;

    readProduct(
      _storeFront: string,
      _productIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        productName: string;
        productImage: string;
        productDescription: string;
        productPrice: BigNumber;
        productSold: BigNumber;
        productQty: BigNumber;
        productActive: boolean;
      }
    >;

    readProductCount(
      _storeFront: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { storeProductCount: BigNumber }>;

    readProductExists(
      _storefront: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { productExists: boolean }>;

    readStoreFront(
      _storeFront: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, boolean, BigNumber] & {
        storeName: string;
        storeImage: string;
        storeDescription: string;
        storeLat: string;
        storeLong: string;
        _storeActive: boolean;
        _totalProducts: BigNumber;
      }
    >;

    readStoreFrontExisits(
      _storeFront: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    writeFavourite(
      _storefront: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    writeOrder(
      _storefront: string,
      _items: {
        ProductName: string;
        Quantity: BigNumberish;
        CusdValue: BigNumberish;
        Storefront: string;
        index: BigNumberish;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    writeProduct(
      _name: string,
      _image: string,
      _description: string,
      _price: BigNumberish,
      _qty: BigNumberish,
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    writeStoreFront(
      _storeName: string,
      _storeImage: string,
      _storeDescription: string,
      _storeLat: string,
      _storeLong: string,
      _storeActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  editProduct(
    _index: BigNumberish,
    _name: string,
    _image: string,
    _description: string,
    _price: BigNumberish,
    _qty: BigNumberish,
    _active: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  readFavourite(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  readFavouriteCount(
    _storeFront: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  readFresaProductCount(overrides?: CallOverrides): Promise<BigNumber>;

  readFresaSaleCount(overrides?: CallOverrides): Promise<BigNumber>;

  readFresaStoreCount(overrides?: CallOverrides): Promise<BigNumber>;

  readOrder(
    _customer: string,
    _orderid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      OrderId: BigNumber;
      TotalItems: BigNumber;
      TotalValue: BigNumber;
      Timestamp: BigNumber;
      customerAddress: string;
    }
  >;

  readOrderItems(
    _customer: string,
    _orderid: BigNumberish,
    _itemid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string, BigNumber] & {
      _productName: string;
      _Quantity: BigNumber;
      _CusdValue: BigNumber;
      _StoreFront: string;
      _productIndex: BigNumber;
    }
  >;

  readProduct(
    _storeFront: string,
    _productIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      productName: string;
      productImage: string;
      productDescription: string;
      productPrice: BigNumber;
      productSold: BigNumber;
      productQty: BigNumber;
      productActive: boolean;
    }
  >;

  readProductCount(
    _storeFront: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  readProductExists(
    _storefront: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  readStoreFront(
    _storeFront: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, string, boolean, BigNumber] & {
      storeName: string;
      storeImage: string;
      storeDescription: string;
      storeLat: string;
      storeLong: string;
      _storeActive: boolean;
      _totalProducts: BigNumber;
    }
  >;

  readStoreFrontExisits(
    _storeFront: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  writeFavourite(
    _storefront: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  writeOrder(
    _storefront: string,
    _items: {
      ProductName: string;
      Quantity: BigNumberish;
      CusdValue: BigNumberish;
      Storefront: string;
      index: BigNumberish;
    }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  writeProduct(
    _name: string,
    _image: string,
    _description: string,
    _price: BigNumberish,
    _qty: BigNumberish,
    _active: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  writeStoreFront(
    _storeName: string,
    _storeImage: string,
    _storeDescription: string,
    _storeLat: string,
    _storeLong: string,
    _storeActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    editProduct(
      _index: BigNumberish,
      _name: string,
      _image: string,
      _description: string,
      _price: BigNumberish,
      _qty: BigNumberish,
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    readFavourite(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    readFavouriteCount(
      _storeFront: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readFresaProductCount(overrides?: CallOverrides): Promise<BigNumber>;

    readFresaSaleCount(overrides?: CallOverrides): Promise<BigNumber>;

    readFresaStoreCount(overrides?: CallOverrides): Promise<BigNumber>;

    readOrder(
      _customer: string,
      _orderid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        OrderId: BigNumber;
        TotalItems: BigNumber;
        TotalValue: BigNumber;
        Timestamp: BigNumber;
        customerAddress: string;
      }
    >;

    readOrderItems(
      _customer: string,
      _orderid: BigNumberish,
      _itemid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, BigNumber] & {
        _productName: string;
        _Quantity: BigNumber;
        _CusdValue: BigNumber;
        _StoreFront: string;
        _productIndex: BigNumber;
      }
    >;

    readProduct(
      _storeFront: string,
      _productIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        productName: string;
        productImage: string;
        productDescription: string;
        productPrice: BigNumber;
        productSold: BigNumber;
        productQty: BigNumber;
        productActive: boolean;
      }
    >;

    readProductCount(
      _storeFront: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readProductExists(
      _storefront: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    readStoreFront(
      _storeFront: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, boolean, BigNumber] & {
        storeName: string;
        storeImage: string;
        storeDescription: string;
        storeLat: string;
        storeLong: string;
        _storeActive: boolean;
        _totalProducts: BigNumber;
      }
    >;

    readStoreFrontExisits(
      _storeFront: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    writeFavourite(
      _storefront: string,
      overrides?: CallOverrides
    ): Promise<void>;

    writeOrder(
      _storefront: string,
      _items: {
        ProductName: string;
        Quantity: BigNumberish;
        CusdValue: BigNumberish;
        Storefront: string;
        index: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    writeProduct(
      _name: string,
      _image: string,
      _description: string,
      _price: BigNumberish,
      _qty: BigNumberish,
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    writeStoreFront(
      _storeName: string,
      _storeImage: string,
      _storeDescription: string,
      _storeLat: string,
      _storeLong: string,
      _storeActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    editProduct(
      _index: BigNumberish,
      _name: string,
      _image: string,
      _description: string,
      _price: BigNumberish,
      _qty: BigNumberish,
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    readFavourite(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readFavouriteCount(
      _storeFront: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readFresaProductCount(overrides?: CallOverrides): Promise<BigNumber>;

    readFresaSaleCount(overrides?: CallOverrides): Promise<BigNumber>;

    readFresaStoreCount(overrides?: CallOverrides): Promise<BigNumber>;

    readOrder(
      _customer: string,
      _orderid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readOrderItems(
      _customer: string,
      _orderid: BigNumberish,
      _itemid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readProduct(
      _storeFront: string,
      _productIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readProductCount(
      _storeFront: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readProductExists(
      _storefront: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readStoreFront(
      _storeFront: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readStoreFrontExisits(
      _storeFront: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    writeFavourite(
      _storefront: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    writeOrder(
      _storefront: string,
      _items: {
        ProductName: string;
        Quantity: BigNumberish;
        CusdValue: BigNumberish;
        Storefront: string;
        index: BigNumberish;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    writeProduct(
      _name: string,
      _image: string,
      _description: string,
      _price: BigNumberish,
      _qty: BigNumberish,
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    writeStoreFront(
      _storeName: string,
      _storeImage: string,
      _storeDescription: string,
      _storeLat: string,
      _storeLong: string,
      _storeActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    editProduct(
      _index: BigNumberish,
      _name: string,
      _image: string,
      _description: string,
      _price: BigNumberish,
      _qty: BigNumberish,
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    readFavourite(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readFavouriteCount(
      _storeFront: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readFresaProductCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readFresaSaleCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readFresaStoreCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readOrder(
      _customer: string,
      _orderid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readOrderItems(
      _customer: string,
      _orderid: BigNumberish,
      _itemid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readProduct(
      _storeFront: string,
      _productIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readProductCount(
      _storeFront: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readProductExists(
      _storefront: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readStoreFront(
      _storeFront: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readStoreFrontExisits(
      _storeFront: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    writeFavourite(
      _storefront: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    writeOrder(
      _storefront: string,
      _items: {
        ProductName: string;
        Quantity: BigNumberish;
        CusdValue: BigNumberish;
        Storefront: string;
        index: BigNumberish;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    writeProduct(
      _name: string,
      _image: string,
      _description: string,
      _price: BigNumberish,
      _qty: BigNumberish,
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    writeStoreFront(
      _storeName: string,
      _storeImage: string,
      _storeDescription: string,
      _storeLat: string,
      _storeLong: string,
      _storeActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
