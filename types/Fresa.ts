/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type StoreFrontStruct = { owner: string; store_name: string, store_image: string, store_description: string, store_lat: string, store_long: string };

export type StoreFrontStructOutput = [string, string, string, string, string, string] & {
  owner: string; store_name: string; store_image: string; store_description: string; store_lat: string; store_long: string;
};

export type ProductStruct = { owner: string; name: string, image: string, description: string, price: BigNumberish, sold: BigNumberish, index: BigNumberish, active: boolean };

export type ProductStructOutput = [string, string, string, string, BigNumberish, BigNumberish, BigNumberish, boolean] & { 
  owner: string; name: string, image: string, description: string, price: BigNumberish, sold: BigNumberish, index: BigNumberish, active: boolean 
};

export type OrderStruct = { owner: string; name: string, image: string, description: string, price: BigNumberish, sold: BigNumberish, index: BigNumberish, active: boolean };


export interface FresaInterface extends utils.Interface {
  functions: {
    "readProduct(string, uint)": FunctionFragment;
    "readProductCount(string)": FunctionFragment;
    "readProductExists(string, uint)": FunctionFragment;
    "writeProduct(string, string, string, uint, bool)": FunctionFragment;
    "buyProduct(uint, string)": FunctionFragment;
    "writeStoreFront(string, string, string, string, string)": FunctionFragment;
    "readStoreFront(string)": FunctionFragment;
    "readStoreFrontExisits(string)": FunctionFragment;
  };
  encodeFunctionData(functionFragment: "readProduct", values: [string]): string;
  encodeFunctionData(functionFragment: "readProductCount", values: [string]): string;
  encodeFunctionData(functionFragment: "readProductExists", values: [string]): string;
  encodeFunctionData(functionFragment: "writeProduct", values: [string]): string;
  encodeFunctionData(functionFragment: "buyProduct", values: [string]): string;
  encodeFunctionData(functionFragment: "writeStoreFront", values: [string]): string;
  encodeFunctionData(functionFragment: "readStoreFront", values: [string]): string;
  encodeFunctionData(functionFragment: "readStoreFrontExisits", values: [string]): string;

  decodeFunctionResult(functionFragment: "readProduct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readProductCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readProductExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "writeProduct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyProduct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "writeStoreFront", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readStoreFront", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readStoreFrontExisits", data: BytesLike): Result;

  events: {
    "Transfer(string, string, string)": EventFragment;
    "Approval(string, string, string)": EventFragment;
  };
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
}

export type TransferEvent = TypedEvent<[], {}>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type ApprovalEvent = TypedEvent<[], {}>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface Fresa extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FresaInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    readProduct(_storeFront: string, _productIndex: number, overrides?: CallOverrides): Promise<[ProductStructOutput]>;
    readProductCount(_storeFront: string, overrides?: CallOverrides): Promise<[number]>;
    readProductExists(_storeFront: string, _index: number, overrides?: CallOverrides): Promise<[boolean]>;
    writeProduct(_name: string, _image: string, _description: string, _price: number, _active: boolean, 
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
    buyProduct(_index: number, _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
    writeStoreFront(_storeName: string, _storeImage: string, _storeDescription: string, _storeLat: string, _storeLong: string, 
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
    readStoreFront(_storeFront: string, overrides?: CallOverrides): Promise<[StoreFrontStructOutput]>;
    readStoreFrontExisits(_storeFront: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  readProduct(_storeFront: string, _productIndex: number, overrides?: CallOverrides): Promise<[ProductStructOutput]>;
  readProductCount(_storeFront: string, overrides?: CallOverrides): Promise<[number]>;
  readProductExists(_storeFront: string, _index: number, overrides?: CallOverrides): Promise<[boolean]>;
  writeProduct(_name: string, _image: string, _description: string, _price: number, _active: boolean, 
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;
  buyProduct(_index: number, _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;
  writeStoreFront(_storeName: string, _storeImage: string, _storeDescription: string, _storeLat: string, _storeLong: string, 
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;
  readStoreFront(_storeFront: string, overrides?: CallOverrides): Promise<StoreFrontStructOutput>;
  readStoreFrontExisits(_storeFront: string, overrides?: CallOverrides): Promise<[boolean]>;

  callStatic: {
    readProduct(_storeFront: string, _productIndex: number, overrides?: CallOverrides): Promise<[ProductStructOutput]>;
    readProductCount(_storeFront: string, overrides?: CallOverrides): Promise<[number]>;
    readProductExists(_storeFront: string, _index: number, overrides?: CallOverrides): Promise<[boolean]>;
    writeProduct(_name: string, _image: string, _description: string, _price: number, _active: boolean, 
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
    buyProduct(_index: number, _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
    writeStoreFront(_storeName: string, _storeImage: string, _storeDescription: string, _storeLat: string, _storeLong: string, 
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
    readStoreFront(_storeFront: string, overrides?: CallOverrides): Promise<StoreFrontStructOutput>;
    readStoreFrontExisits(_storeFront: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  filters: {
    "Transfer()"(): TransferEventFilter;
    Transfer(): TransferEventFilter;

    "Approval()"(): ApprovalEventFilter;
    Approval(): ApprovalEventFilter;
  };

  estimateGas: {
    readProduct(_storeFront: string, _productIndex: number, overrides?: CallOverrides): Promise<BigNumber>;
    readProductCount(_storeFront: string, overrides?: CallOverrides): Promise<BigNumber>;
    readProductExists(_storeFront: string,  _index: number, overrides?: CallOverrides): Promise<BigNumber>;
    writeProduct(_name: string, _image: string, _description: string, _price: number, _active: boolean, overrides?: CallOverrides): Promise<BigNumber>;
    buyProduct(_index: number, _addr: string, overrides?: CallOverrides): Promise<BigNumber>;
    writeStoreFront(_storeName: string, _storeImage: string, _storeDescription: string, _storeLat: string, _storeLong: string, overrides?: CallOverrides): Promise<BigNumber>;
    readStoreFront(_storeFront: string, overrides?: CallOverrides): Promise<BigNumber>;
    readStoreFrontExisits(_storeFront: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    readProduct(_storeFront: string, _productIndex: number, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    readProductCount(_storeFront: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    readProductExists(_storeFront: string,  _index: number, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    writeProduct(_name: string, _image: string, _description: string, _price: number, _active: boolean, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    buyProduct(_index: number, _addr: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    writeStoreFront(_storeName: string, _storeImage: string, _storeDescription: string, _storeLat: string, _storeLong: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    readStoreFront(_storeFront: any, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    readStoreFrontExisits(_storeFront: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
