/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Fresa, FresaInterface } from "../Fresa";
import { _abi, _bytecode } from "./contract_json";

type FresaConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FresaConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Fresa__factory extends ContractFactory {
  constructor(...args: FresaConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _defaultSuffix: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Fresa> {
    return super.deploy(_defaultSuffix, overrides || {}) as Promise<Fresa>;
  }
  getDeployTransaction(
    _defaultSuffix: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_defaultSuffix, overrides || {});
  }
  attach(address: string): Fresa {
    return super.attach(address) as Fresa;
  }
  connect(signer: Signer): Fresa__factory {
    return super.connect(signer) as Fresa__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FresaInterface {
    return new utils.Interface(_abi) as FresaInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Fresa {
    return new Contract(address, _abi, signerOrProvider) as Fresa;
  }
}
